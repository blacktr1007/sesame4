"""
This type stub file was generated by pyright.
"""

import uuid
from typing import Optional, TYPE_CHECKING, Union
from pysesame3.helper import CHProductModel
from pysesame3.auth import CognitoAuth, WebAPIAuth

if TYPE_CHECKING:
    ...
logger = ...
class CHDevices:
    def __init__(self, authenticator: Union[WebAPIAuth, CognitoAuth]) -> None:
        """Generic Implementation for Candyhouse products.

        Args:
            authenticator (Union[WebAPIAuth, CognitoAuth]): The authenticator for the device
        """
        ...
    
    @property
    def authenticator(self) -> Union[WebAPIAuth, CognitoAuth]:
        ...
    
    @property
    def deviceId(self) -> Optional[str]:
        """Return a device id of a specific device.

        Returns:
            str: The UUID of the device.
        """
        ...
    
    @property
    def productModel(self) -> Optional[CHProductModel]:
        """Return a model information of a specific device.

        Returns:
            CHProductModel: The product model of the device.
        """
        ...
    
    def setDeviceId(self, id: Union[uuid.UUID, str]) -> None:
        """Set a device id of a specific device.

        Args:
            id (Union[uuid.UUID, str]): The UUID of the device.

        Raises:
            ValueError: If `id` is invalid.
        """
        ...
    
    def setProductModel(self, model: CHProductModel) -> None:
        """Set a model information of a specific device.

        Args:
            model (CHProductModel): The product model of the device.

        Raises:
            ValueError: If `model` is invalid.
        """
        ...
    


class SesameLocker(CHDevices):
    def __init__(self, authenticator: Union[WebAPIAuth, CognitoAuth]) -> None:
        """Generic Implementation for Candyhouse smart locks.

        Args:
            authenticator (Union[WebAPIAuth, CognitoAuth]): The authenticator for the device
        """
        ...
    
    def getDeviceUUID(self) -> Optional[str]:
        """Get a device UUID of a specific device.

        Returns:
            str: The UUID of the device.
        """
        ...
    
    def getSecretKey(self) -> Optional[bytes]:
        """Get a secret key of a specific device.

        Returns:
            str: The secret key for controlling the device.
        """
        ...
    
    def setDeviceUUID(self, id: Union[uuid.UUID, str]) -> None:
        """Set a device UUID of a specific device.

        Args:
            id (Union[uuid.UUID, str]): The UUID of the device.
        """
        ...
    
    def setSecretKey(self, key: Union[bytes, str]) -> None:
        """Set a secret key for a specific device.

        Args:
            key (str): The secret key for controlling the device.

        Raises:
            ValueError: If `key` is invalid.
        """
        ...
    
    def __str__(self) -> str:
        """Return a string representation of an object.

        Returns:
            str: The string representation of the object.
        """
        ...
    


