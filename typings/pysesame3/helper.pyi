"""
This type stub file was generated by pyright.
"""

import sys
from enum import Enum
from typing import Dict, TypedDict, Union
from typing_extensions import TypedDict

if sys.version_info[: 2] >= (3, 8):
    ...
else:
    ...
logger = ...
class ProductData(TypedDict):
    deviceModel: str
    isLocker: bool
    productType: int
    deviceFactory: Union[str, None]
    ...


class CHProductModel(Enum):
    WM2: ProductData = ...
    SS2: ProductData = ...
    SS4: ProductData = ...
    SesameBot1: ProductData = ...
    @staticmethod
    def getByModel(model: str) -> CHProductModel:
        ...
    
    @staticmethod
    def getByValue(val: int) -> CHProductModel:
        ...
    
    def deviceModel(self) -> str:
        ...
    
    def isLocker(self) -> bool:
        ...
    
    def productType(self) -> int:
        ...
    
    def deviceFactory(self) -> Union[type, None]:
        ...
    


class CHSesameProtocolMechStatus:
    def __init__(self, rawdata: Union[bytes, str, Dict]) -> None:
        """Represent a mechanical status of a device.

        Args:
            rawdata (Union[bytes, str, dict]): The raw `mechst` data for the device.
        """
        ...
    
    def getBatteryVoltage(self) -> float:
        """Return battery status information as a voltage.

        Returns:
            float: Battery power left as a voltage.
        """
        ...
    
    def getPosition(self) -> int:
        """Return current potision.

        Returns:
            int: The current position (-32767~0~32767)
        """
        ...
    
    def getRetCode(self) -> int:
        """Return a return code.

        Returns:
            int: The result for a locking/unlocking request.
        """
        ...
    
    def getTarget(self) -> int:
        """Return target potision.

        Returns:
            int: The target position (-32767~0~32767)
        """
        ...
    
    def isInLockRange(self) -> bool:
        """Return whether a device is currently locked.

        Returns:
            bool: `True` if it is locked, `False` if not.
        """
        ...
    
    def isInUnlockRange(self) -> bool:
        """Return whether a device is currently unlocked.

        Returns:
            bool: `True` if it is unlocked, `False` if not.
        """
        ...
    


class CHSesame2MechStatus(CHSesameProtocolMechStatus):
    def __init__(self, rawdata: Union[bytes, str, Dict]) -> None:
        """Represent a mechanical status of a SESAME3.

        Args:
            rawdata (Union[bytes, str, Dict]): The raw `mechst` data for the device.
        """
        ...
    
    def getBatteryPercentage(self) -> int:
        """Return battery status information as a percentage.

        Returns:
            int: Battery power left as a percentage.
        """
        ...
    
    def getBatteryPrecentage(self) -> int:
        """Return battery status information as a percentage.
        The method name contains typo, kept for backward compatibility.

        Returns:
            int: Battery power left as a percentage.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class CHSesameBotMechStatus(CHSesameProtocolMechStatus):
    def __init__(self, rawdata: Union[bytes, str, Dict]) -> None:
        """Represent a mechanical status of a SESAME bot.

        Args:
            rawdata (Union[bytes, str, Dict]): The raw `mechst` data for the device.
        """
        ...
    
    def getBatteryPercentage(self) -> int:
        """Return battery status information as a percentage.

        Returns:
            int: Battery power left as a percentage.
        """
        ...
    
    def getBatteryPrecentage(self) -> int:
        """Return battery status information as a percentage.
        The method name contains typo, kept for backward compatibility.

        Returns:
            int: Battery power left as a percentage.
        """
        ...
    
    def getMotorStatus(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    


class RegexHelper:
    @staticmethod
    def get_aws_region(text: str) -> str:
        ...
    


