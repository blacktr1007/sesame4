"""
This type stub file was generated by pyright.
"""

import requests
from typing import Dict, List, Optional, TYPE_CHECKING, Union
from .const import CHSesame2CMD
from .history import CHSesame2History
from .auth import CognitoAuth, WebAPIAuth
from .device import SesameLocker

if TYPE_CHECKING:
    ...
logger = ...
class SesameCloud:
    def __init__(self, authenticator: Union[WebAPIAuth, CognitoAuth]) -> None:
        """Construct and send a Request to the cloud.

        Args:
            authenticator (Union[WebAPIAuth, CognitoAuth]): The authenticator
        """
        ...
    
    def requestAPI(self, method: str, url: str, json: Optional[dict] = ...) -> requests.Response:
        """A Wrapper of `requests.request`.

        Args:
            method (str): HTTP method to use: `GET`, `OPTIONS`, `HEAD`, `POST`, `PUT`, `PATCH`, or `DELETE`.
            url (str): URL to send.
            json (Optional[dict], optional): JSON data for the body to attach to the request. Defaults to `None`.

        Raises:
            RuntimeError: An HTTP error occurred.

        Returns:
            requests.Response: The server's response to an HTTP request.
        """
        ...
    
    def getSign(self, device: SesameLocker) -> str:
        """Generate a AES-CMAC tag.

        Returns:
            str: AES-CMAC tag.
        """
        ...
    
    def getMechStatus(self, device: SesameLocker) -> Union[Dict, str]:
        """Retrive a mechanical status of a device.

        Args:
            device (SesameLocker): The device for which you want to query.

        Returns:
            Union[Dict, str]: Current mechanical status of the device. `Dict` if using WebAPIAuth, and `str` if using CognitoAuth.
        """
        ...
    
    def sendCmd(self, device: SesameLocker, cmd: CHSesame2CMD, history_tag: str = ...) -> bool:
        """Send a locking/unlocking command.

        Args:
            device (SesameLocker): The device for which you want to query.
            cmd (CHSesame2CMD): Lock, Unlock and Toggle.
            history_tag (CHSesame2CMD): The key tag to sent when locking and unlocking.

        Returns:
            bool: `True` if success, `False` if not.
        """
        ...
    
    def getHistoryEntries(self, device: SesameLocker) -> List[CHSesame2History]:
        """Retrieve the history of all events with a device.

        Args:
            device (SesameLocker): The device for which you want to query.

        Returns:
            list[CHSesame2History]: A list of events.
        """
        ...
    


class AWSIoT:
    def __init__(self, authenticator: CognitoAuth) -> None:
        """Construct and send a request to the AWS IoT.

        Args:
            authenticator (CognitoAuth): The authenticator
        """
        ...
    
    def connect(self) -> None:
        """Open the actual connection to the server."""
        ...
    


