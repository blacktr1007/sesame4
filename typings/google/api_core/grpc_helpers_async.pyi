"""
This type stub file was generated by pyright.
"""

from grpc import aio

"""AsyncIO helpers for :mod:`grpc` supporting 3.6+.

Please combine more detailed docstring in grpc_helpers.py to use following
functions. This module is implementing the same surface with AsyncIO semantics.
"""
class _WrappedCall(aio.Call):
    def __init__(self) -> None:
        ...
    
    def with_call(self, call): # -> Self@_WrappedCall:
        """Supplies the call object separately to keep __init__ clean."""
        ...
    
    async def initial_metadata(self):
        ...
    
    async def trailing_metadata(self):
        ...
    
    async def code(self):
        ...
    
    async def details(self):
        ...
    
    def cancelled(self):
        ...
    
    def done(self):
        ...
    
    def time_remaining(self):
        ...
    
    def cancel(self):
        ...
    
    def add_done_callback(self, callback): # -> None:
        ...
    
    async def wait_for_connection(self): # -> None:
        ...
    


class _WrappedUnaryResponseMixin(_WrappedCall):
    def __await__(self): # -> Generator[Unknown, None, Unknown]:
        ...
    


class _WrappedStreamResponseMixin(_WrappedCall):
    def __init__(self) -> None:
        ...
    
    async def read(self):
        ...
    
    def __aiter__(self): # -> AsyncGenerator[Unknown, None]:
        ...
    


class _WrappedStreamRequestMixin(_WrappedCall):
    async def write(self, request): # -> None:
        ...
    
    async def done_writing(self): # -> None:
        ...
    


class _WrappedUnaryUnaryCall(_WrappedUnaryResponseMixin, aio.UnaryUnaryCall):
    """Wrapped UnaryUnaryCall to map exceptions."""
    ...


class _WrappedUnaryStreamCall(_WrappedStreamResponseMixin, aio.UnaryStreamCall):
    """Wrapped UnaryStreamCall to map exceptions."""
    ...


class _WrappedStreamUnaryCall(_WrappedUnaryResponseMixin, _WrappedStreamRequestMixin, aio.StreamUnaryCall):
    """Wrapped StreamUnaryCall to map exceptions."""
    ...


class _WrappedStreamStreamCall(_WrappedStreamRequestMixin, _WrappedStreamResponseMixin, aio.StreamStreamCall):
    """Wrapped StreamStreamCall to map exceptions."""
    ...


def wrap_errors(callable_): # -> (*args: Unknown, **kwargs: Unknown) -> _WrappedUnaryUnaryCall:
    """Wrap a gRPC async callable and map :class:`grpc.RpcErrors` to
    friendly error classes.

    Errors raised by the gRPC callable are mapped to the appropriate
    :class:`google.api_core.exceptions.GoogleAPICallError` subclasses. The
    original `grpc.RpcError` (which is usually also a `grpc.Call`) is
    available from the ``response`` property on the mapped exception. This
    is useful for extracting metadata from the original error.

    Args:
        callable_ (Callable): A gRPC callable.

    Returns: Callable: The wrapped gRPC callable.
    """
    ...

def create_channel(target, credentials=..., scopes=..., ssl_credentials=..., credentials_file=..., quota_project_id=..., default_scopes=..., default_host=..., **kwargs):
    """Create an AsyncIO secure channel with credentials.

    Args:
        target (str): The target service address in the format 'hostname:port'.
        credentials (google.auth.credentials.Credentials): The credentials. If
            not specified, then this function will attempt to ascertain the
            credentials from the environment using :func:`google.auth.default`.
        scopes (Sequence[str]): A optional list of scopes needed for this
            service. These are only used when credentials are not specified and
            are passed to :func:`google.auth.default`.
        ssl_credentials (grpc.ChannelCredentials): Optional SSL channel
            credentials. This can be used to specify different certificates.
        credentials_file (str): A file with credentials that can be loaded with
            :func:`google.auth.load_credentials_from_file`. This argument is
            mutually exclusive with credentials.
        quota_project_id (str): An optional project to use for billing and quota.
        default_scopes (Sequence[str]): Default scopes passed by a Google client
            library. Use 'scopes' for user-defined scopes.
        default_host (str): The default endpoint. e.g., "pubsub.googleapis.com".
        kwargs: Additional key-word args passed to :func:`aio.secure_channel`.

    Returns:
        aio.Channel: The created channel.

    Raises:
        google.api_core.DuplicateCredentialArgs: If both a credentials object and credentials_file are passed.
    """
    ...

class FakeUnaryUnaryCall(_WrappedUnaryUnaryCall):
    """Fake implementation for unary-unary RPCs.

    It is a dummy object for response message. Supply the intended response
    upon the initialization, and the coroutine will return the exact response
    message.
    """
    def __init__(self, response=...) -> None:
        ...
    
    def __await__(self): # -> Generator[Any, None, Any]:
        ...
    


class FakeStreamUnaryCall(_WrappedStreamUnaryCall):
    """Fake implementation for stream-unary RPCs.

    It is a dummy object for response message. Supply the intended response
    upon the initialization, and the coroutine will return the exact response
    message.
    """
    def __init__(self, response=...) -> None:
        ...
    
    def __await__(self): # -> Generator[Any, None, Any]:
        ...
    
    async def wait_for_connection(self): # -> None:
        ...
    


