"""
This type stub file was generated by pyright.
"""

from google.api_core import gapic_v1
import enum
import typing
from typing import NamedTuple, Union
from google.pubsub_v1.services.publisher.client import OptionalRetry

if typing.TYPE_CHECKING:
    from google.pubsub_v1 import types as gapic_types
    if hasattr(gapic_v1.method, "_MethodDefault"):
        OptionalTimeout = Union[gapic_types.TimeoutType, gapic_v1.method._MethodDefault]
    else:
        OptionalTimeout = Union[gapic_types.TimeoutType, object]  # type: ignore

class BatchSettings(NamedTuple):
    """The settings for batch publishing the messages."""
    max_bytes: int = ...
    max_latency: float = ...
    max_messages: int = ...


class LimitExceededBehavior(str, enum.Enum):
    """The possible actions when exceeding the publish flow control limits."""
    IGNORE = ...
    BLOCK = ...
    ERROR = ...


class PublishFlowControl(NamedTuple):
    """The client flow control settings for message publishing."""
    message_limit: int = ...
    byte_limit: int = ...
    limit_exceeded_behavior: LimitExceededBehavior = ...


class PublisherOptions(NamedTuple):
    """The options for the publisher client."""
    enable_message_ordering: bool = ...
    flow_control: PublishFlowControl = ...
    retry: OptionalRetry = ...
    timeout: OptionalTimeout = ...


class FlowControl(NamedTuple):
    """The settings for controlling the rate at which messages are pulled
    with an asynchronous subscription.
    """
    max_bytes: int = ...
    max_messages: int = ...
    max_lease_duration: float = ...
    min_duration_per_lease_extension: float = ...
    max_duration_per_lease_extension: float = ...


_shared_modules = ...
_local_modules = ...
names = ...
__all__ = tuple(sorted(names))
