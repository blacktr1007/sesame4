"""
This type stub file was generated by pyright.
"""

import abc
import concurrent.futures
import queue
import typing
from typing import Callable, List, Optional
from google.cloud import pubsub_v1

"""Schedulers provide means to *schedule* callbacks asynchronously.

These are used by the subscriber to call the user-provided callback to process
each message.
"""
if typing.TYPE_CHECKING:
    ...
class Scheduler(metaclass=abc.ABCMeta):
    """Abstract base class for schedulers.

    Schedulers are used to schedule callbacks asynchronously.
    """
    @property
    @abc.abstractmethod
    def queue(self) -> queue.Queue:
        """Queue: A concurrency-safe queue specific to the underlying
        concurrency implementation.

        This queue is used to send messages *back* to the scheduling actor.
        """
        ...
    
    @abc.abstractmethod
    def schedule(self, callback: Callable, *args, **kwargs) -> None:
        """Schedule the callback to be called asynchronously.

        Args:
            callback: The function to call.
            args: Positional arguments passed to the callback.
            kwargs: Key-word arguments passed to the callback.

        Returns:
            None
        """
        ...
    
    @abc.abstractmethod
    def shutdown(self, await_msg_callbacks: bool = ...) -> List[pubsub_v1.subscriber.message.Message]:
        """Shuts down the scheduler and immediately end all pending callbacks.

        Args:
            await_msg_callbacks:
                If ``True``, the method will block until all currently executing
                callbacks are done processing. If ``False`` (default), the
                method will not wait for the currently running callbacks to complete.

        Returns:
            The messages submitted to the scheduler that were not yet dispatched
            to their callbacks.
            It is assumed that each message was submitted to the scheduler as the
            first positional argument to the provided callback.
        """
        ...
    


class ThreadScheduler(Scheduler):
    """A thread pool-based scheduler. It must not be shared across
       SubscriberClients.

    This scheduler is useful in typical I/O-bound message processing.

    Args:
        executor:
            An optional executor to use. If not specified, a default one
            will be created.
    """
    def __init__(self, executor: Optional[concurrent.futures.ThreadPoolExecutor] = ...) -> None:
        ...
    
    @property
    def queue(self): # -> Queue[Unknown]:
        """Queue: A thread-safe queue used for communication between callbacks
        and the scheduling thread."""
        ...
    
    def schedule(self, callback: Callable, *args, **kwargs) -> None:
        """Schedule the callback to be called asynchronously in a thread pool.

        Args:
            callback: The function to call.
            args: Positional arguments passed to the callback.
            kwargs: Key-word arguments passed to the callback.

        Returns:
            None
        """
        ...
    
    def shutdown(self, await_msg_callbacks: bool = ...) -> List[pubsub_v1.subscriber.message.Message]:
        """Shut down the scheduler and immediately end all pending callbacks.

        Args:
            await_msg_callbacks:
                If ``True``, the method will block until all currently executing
                executor threads are done processing. If ``False`` (default), the
                method will not wait for the currently running threads to complete.

        Returns:
            The messages submitted to the scheduler that were not yet dispatched
            to their callbacks.
            It is assumed that each message was submitted to the scheduler as the
            first positional argument to the provided callback.
        """
        ...
    


