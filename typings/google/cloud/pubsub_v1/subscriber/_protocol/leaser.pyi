"""
This type stub file was generated by pyright.
"""

import typing
from typing import Iterable, Optional, Union
from google.cloud.pubsub_v1.subscriber._protocol import requests
from google.cloud.pubsub_v1.subscriber._protocol.streaming_pull_manager import StreamingPullManager

if typing.TYPE_CHECKING:
    ...
_LOGGER = ...
_LEASE_WORKER_NAME = ...
class _LeasedMessage(typing.NamedTuple):
    sent_time: float
    size: int
    ordering_key: Optional[str]
    ...


class Leaser:
    def __init__(self, manager: StreamingPullManager) -> None:
        ...
    
    @property
    def message_count(self) -> int:
        """The number of leased messages."""
        ...
    
    @property
    def ack_ids(self) -> KeysView[str]:
        """The ack IDs of all leased messages."""
        ...
    
    @property
    def bytes(self) -> int:
        """The total size, in bytes, of all leased messages."""
        ...
    
    def add(self, items: Iterable[requests.LeaseRequest]) -> None:
        """Add messages to be managed by the leaser."""
        ...
    
    def start_lease_expiry_timer(self, ack_ids: Iterable[str]) -> None:
        """Start the lease expiry timer for `items`.

        Args:
            items: Sequence of ack-ids for which to start lease expiry timers.
        """
        ...
    
    def remove(self, items: Iterable[Union[requests.AckRequest, requests.DropRequest, requests.NackRequest]]) -> None:
        """Remove messages from lease management."""
        ...
    
    def maintain_leases(self) -> None:
        """Maintain all of the leases being managed.

        This method modifies the ack deadline for all of the managed
        ack IDs, then waits for most of that time (but with jitter), and
        repeats.
        """
        ...
    
    def start(self) -> None:
        ...
    
    def stop(self) -> None:
        ...
    


