"""
This type stub file was generated by pyright.
"""

from typing import Dict, Optional, Union

MIN_ACK_DEADLINE = ...
MAX_ACK_DEADLINE = ...
class Histogram:
    """Representation of a single histogram.

    The purpose of this class is to store actual ack timing information
    in order to predict how long to renew leases.

    The default implementation uses the 99th percentile of previous ack
    times to implicitly lease messages; however, custom
    :class:`~.pubsub_v1.subscriber._consumer.Consumer` subclasses
    are free to use a different formula.

    The precision of data stored is to the nearest integer. Additionally,
    values outside the range of ``MIN_ACK_DEADLINE <= x <= MAX_ACK_DEADLINE`` are stored
    as ``MIN_ACK_DEADLINE`` or ``MAX_ACK_DEADLINE``, since these are the boundaries of
    leases in the actual API.
    """
    def __init__(self, data: Optional[Dict[int, int]] = ...) -> None:
        """Instantiate the histogram.

        Args:
            data:
                The data strucure to be used to store the underlying data. The default
                is an empty dictionary. This can be set to a dictionary-like object if
                required (for example, if a special object is needed for concurrency
                reasons).
        """
        ...
    
    def __len__(self) -> int:
        """Return the total number of data points in this histogram.

        This is cached on a separate counter (rather than computing it using
        ``sum([v for v in self._data.values()])``) to optimize lookup.

        Returns:
            The total number of data points in this histogram.
        """
        ...
    
    def __contains__(self, needle: int) -> bool:
        """Return ``True`` if needle is present in the histogram, ``False`` otherwise."""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def max(self) -> int:
        """Return the maximum value in this histogram.

        If there are no values in the histogram at all, return ``MAX_ACK_DEADLINE``.

        Returns:
            The maximum value in the histogram.
        """
        ...
    
    @property
    def min(self) -> int:
        """Return the minimum value in this histogram.

        If there are no values in the histogram at all, return ``MIN_ACK_DEADLINE``.

        Returns:
            The minimum value in the histogram.
        """
        ...
    
    def add(self, value: Union[int, float]) -> None:
        """Add the value to this histogram.

        Args:
            value:
                The value. Values outside of
                ``MIN_ACK_DEADLINE <= x <= MAX_ACK_DEADLINE``
                will be raised to ``MIN_ACK_DEADLINE`` or reduced to
                ``MAX_ACK_DEADLINE``.
        """
        ...
    
    def percentile(self, percent: Union[int, float]) -> int:
        """Return the value that is the Nth precentile in the histogram.

        Args:
            percent:
                The precentile being sought. The default consumer implementations
                consistently use ``99``.

        Returns:
            The value corresponding to the requested percentile.
        """
        ...
    


