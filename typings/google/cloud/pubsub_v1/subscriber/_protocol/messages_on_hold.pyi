"""
This type stub file was generated by pyright.
"""

import typing
from typing import Any, Callable, Iterable, Optional
from google.cloud.pubsub_v1 import subscriber

if typing.TYPE_CHECKING:
    ...
class MessagesOnHold:
    """Tracks messages on hold by ordering key. Not thread-safe."""
    def __init__(self) -> None:
        ...
    
    @property
    def size(self) -> int:
        """Return the number of messages on hold across ordered and unordered messages.

        Note that this object may still store information about ordered messages
        in flight even if size is zero.

        Returns:
            The size value.
        """
        ...
    
    def get(self) -> Optional[subscriber.message.Message]:
        """Gets a message from the on-hold queue. A message with an ordering
        key wont be returned if there's another message with the same key in
        flight.

        Returns:
            A message that hasn't been sent to the user yet or ``None`` if there are no
            messages available.
        """
        ...
    
    def put(self, message: subscriber.message.Message) -> None:
        """Put a message on hold.

        Args:
            message: The message to put on hold.
        """
        ...
    
    def activate_ordering_keys(self, ordering_keys: Iterable[str], schedule_message_callback: Callable[[subscriber.message.Message], Any]) -> None:
        """Send the next message in the queue for each of the passed-in
        ordering keys, if they exist. Clean up state for keys that no longer
        have any queued messages.

        See comment at streaming_pull_manager.activate_ordering_keys() for more
        detail about the impact of this method on load.

        Args:
            ordering_keys:
                The ordering keys to activate. May be empty.
            schedule_message_callback:
                The callback to call to schedule a message to be sent to the user.
        """
        ...
    


