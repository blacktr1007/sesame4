"""
This type stub file was generated by pyright.
"""

import typing
from google.cloud.pubsub_v1.publisher._sequencer import base
from google.pubsub_v1 import types as gapic_types
from google.cloud.pubsub_v1.publisher import futures
from google.cloud.pubsub_v1.publisher.client import Client as PublisherClient
from google.pubsub_v1.services.publisher.client import OptionalRetry
from google.cloud.pubsub_v1 import types

if typing.TYPE_CHECKING:
    ...
class UnorderedSequencer(base.Sequencer):
    """Sequences messages into batches for one topic without any ordering.

    Public methods are NOT thread-safe.
    """
    def __init__(self, client: PublisherClient, topic: str) -> None:
        ...
    
    def is_finished(self) -> bool:
        """Whether the sequencer is finished and should be cleaned up.

        Returns:
            Whether the sequencer is finished and should be cleaned up.
        """
        ...
    
    def stop(self) -> None:
        """Stop the sequencer.

        Subsequent publishes will fail.

        Raises:
            RuntimeError:
                If called after stop() has already been called.
        """
        ...
    
    def commit(self) -> None:
        """Commit the batch.

        Raises:
            RuntimeError:
                If called after stop() has already been called.
        """
        ...
    
    def unpause(self) -> typing.NoReturn:
        """Not relevant for this class."""
        ...
    
    def publish(self, message: gapic_types.PubsubMessage, retry: OptionalRetry = ..., timeout: types.OptionalTimeout = ...) -> futures.Future:
        """Batch message into existing or new batch.

        Args:
            message:
                The Pub/Sub message.
            retry:
                The retry settings to apply when publishing the message.
            timeout:
                The timeout to apply when publishing the message.

        Returns:
            An object conforming to the :class:`~concurrent.futures.Future` interface.
            The future tracks the publishing status of the message.

        Raises:
            RuntimeError:
                If called after stop() has already been called.

            pubsub_v1.publisher.exceptions.MessageTooLargeError: If publishing
                the ``message`` would exceed the max size limit on the backend.
        """
        ...
    


