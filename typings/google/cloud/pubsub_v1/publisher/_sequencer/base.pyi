"""
This type stub file was generated by pyright.
"""

import abc
import typing
from google.pubsub_v1 import types as gapic_types
from concurrent import futures
from google.pubsub_v1.services.publisher.client import OptionalRetry

if typing.TYPE_CHECKING:
    ...
class Sequencer(metaclass=abc.ABCMeta):
    """The base class for sequencers for Pub/Sub publishing. A sequencer
    sequences messages to be published.
    """
    @abc.abstractmethod
    def is_finished(self) -> bool:
        """Whether the sequencer is finished and should be cleaned up.

        Returns:
            bool: Whether the sequencer is finished and should be cleaned up.
        """
        ...
    
    @abc.abstractmethod
    def unpause(self) -> None:
        """Unpauses this sequencer.

        Raises:
            RuntimeError:
                If called when the sequencer has not been paused.
        """
        ...
    
    @abc.abstractmethod
    def publish(self, message: gapic_types.PubsubMessage, retry: OptionalRetry = ..., timeout: gapic_types.TimeoutType = ...) -> futures.Future:
        """Publish message for this ordering key.

        Args:
            message:
                The Pub/Sub message.
            retry:
                The retry settings to apply when publishing the message.
            timeout:
                The timeout to apply when publishing the message.

        Returns:
            A class instance that conforms to Python Standard library's
            :class:`~concurrent.futures.Future` interface. The future might return
            immediately with a
            `pubsub_v1.publisher.exceptions.PublishToPausedOrderingKeyException`
            if the ordering key is paused.  Otherwise, the future tracks the
            lifetime of the message publish.

        Raises:
            RuntimeError:
                If called after this sequencer has been stopped, either by
                a call to stop() or after all batches have been published.
        """
        ...
    


